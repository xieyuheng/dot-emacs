** python

   #+begin_src emacs-lisp :tangle ~/.emacs
   (setq python-indent-guess-indent-offset nil)
   (setq python-indent-offset 4)
   #+end_src

** rust

   #+begin_src emacs-lisp :tangle ~/.emacs
   (add-to-list 'load-path "~/.emacs.d/rust-mode/")
   (autoload 'rust-mode "rust-mode" nil t)
   (add-to-list 'auto-mode-alist '("\\.rs\\'" . rust-mode))
   (setq rust-indent-offset 4)
   #+end_src

** go

   #+begin_src emacs-lisp :tangle ~/.emacs
   (add-to-list 'load-path "~/.emacs.d/go-mode/")
   (require 'go-mode)

   (add-hook
    'go-mode-hook
    (lambda ()
      (setq tab-width 4)
      (setq indent-tabs-mode nil)))
   #+end_src

** forth
   #+begin_src emacs-lisp :tangle ~/.emacs
   (add-to-list 'load-path "~/.emacs.d/forth-mode/")

   (require 'forth-mode)
   (require 'forth-block-mode)
   (require 'forth-interaction-mode)

   (add-to-list 'auto-mode-alist '("\\.frt$" . forth-mode))
   (add-to-list 'auto-mode-alist '("\\.fth$" . forth-mode))
   (add-to-list 'auto-mode-alist '("\\.feline" . forth-mode))
   #+end_src

** sml

   #+begin_src emacs-lisp :tangle ~/.emacs
   (add-to-list 'load-path "~/.emacs.d/sml/")

   (autoload 'sml-mode "sml-mode" "Major mode for editing SML." t)
   (autoload 'run-sml "sml-proc" "Run an inferior SML process." t)
   (add-to-list 'auto-mode-alist '("\\.\\(sml\\|sig\\)\\'" . sml-mode))

   (setq sml-program-name "sml")
   ;; (setq sml-program-name "hamlet")

   (require 'sml-mode)

   (add-hook
    'sml-mode-hook
    (lambda ()
      (define-key sml-mode-map (kbd "C-x C-e") 'sml-send-function)
      (turn-off-indent)))
   #+end_src

** ocaml-mode

   #+begin_src emacs-lisp :tangle ~/.emacs
   (add-to-list 'load-path "~/.emacs.d/caml-mode/")

   (add-to-list 'auto-mode-alist '("\\.ml[iylp]?$" . caml-mode))
   (autoload 'caml-mode "caml" "Major mode for editing OCaml code." t)
   (autoload 'run-caml "inf-caml" "Run an inferior OCaml process." t)
   (autoload 'camldebug "camldebug" "Run ocamldebug on program." t)
   (add-to-list 'interpreter-mode-alist '("ocamlrun" . caml-mode))
   (add-to-list 'interpreter-mode-alist '("ocaml" . caml-mode))

   (if window-system (require 'caml-font))
   #+end_src

** agda

   #+begin_src emacs-lisp :tangle ~/.emacs
   (add-to-list 'load-path "~/.emacs.d/agda-mode/")

   (autoload 'agda2-mode "agda2-mode"
     "Major mode for editing Agda files (version â‰¥ 2)." t)

   (add-to-list 'auto-mode-alist '("\\.l?agda\\'" . agda2-mode))
   (modify-coding-system-alist 'file "\\.l?agda\\'" 'utf-8)

   (require 'agda2)

   (add-hook
    'agda2-mode-hook
    (lambda ()
      (turn-off-indent)))
   #+end_src

** c

   #+begin_src emacs-lisp :tangle ~/.emacs
   (setq c-basic-offset 4)
   (setq c-default-style "k&r")

   ;; (setq c-default-style "stroustrup")
   ;; (setq c-default-style "whitesmith")
   ;; (setq c-default-style "ellemtel")
   ;; (setq c-default-style "linux")

   (add-hook
    'c-mode-hook
    (lambda ()
      ;; (setq comment-style 'extra)
      (setq comment-start "//")
      (setq comment-end "")))
   #+end_src

** uxn

   #+begin_src emacs-lisp :tangle ~/.emacs
   ;; ensure the directory containing uxntal-mode.el is mentioned
   ;; in emacs' load-path variable.
   (add-to-list 'load-path "~/.emacs.d/uxntal-mode/")

   ;; then load uxntal-mode
   (require 'uxntal-mode)
   #+end_src

** scala

   #+begin_src emacs-lisp :tangle ~/.emacs
   (add-to-list 'load-path "~/.emacs.d/emacs-scala-mode/")
   (require 'scala-mode)
   #+end_src

** lua

   #+begin_src emacs-lisp :tangle ~/.emacs
   (add-to-list 'load-path "~/.emacs.d/lua-mode/")

   (autoload 'lua-mode "lua-mode" "Lua editing mode." t)
   (add-to-list 'auto-mode-alist '("\\.lua$" . lua-mode))
   (add-to-list 'interpreter-mode-alist '("lua" . lua-mode))
   #+end_src

** julia

   #+begin_src emacs-lisp :tangle ~/.emacs
   (add-to-list 'load-path "~/.emacs.d/julia-emacs/")
   (require 'julia-mode)
   #+end_src
