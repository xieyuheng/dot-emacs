#+title: init emacs ^-^

* language

** edit sexp

*** load-path

    #+begin_src emacs-lisp :tangle ~/.emacs
    (add-to-list 'load-path "~/.emacs.d/edit-sexp/")
    #+end_src

*** mark and cruise

    - the follow functions are belong to lisp.el

    #+begin_src emacs-lisp :tangle ~/.emacs
    ;; (global-set-key (kbd "s-z") 'mark-defun)
    ;; (global-set-key (kbd "s-a") 'mark-sexp)
    ;;
    ;; (global-set-key (kbd "s-w") 'backward-sexp)
    ;; (global-set-key (kbd "s-s") 'forward-sexp)
    ;;
    ;; (defun in-> () (interactive) (down-list))
    ;; (global-set-key (kbd "s-e") 'in->)
    ;;
    ;; (defun <-out () (interactive) (backward-up-list))
    ;; (global-set-key (kbd "s-q") '<-out)
    ;;
    ;; (defun out-> () (interactive) (up-list))
    ;; (global-set-key (kbd "s-d") 'out->)


    ;; (global-set-key (kbd "s-z") 'mark-defun)
    (global-set-key (kbd "M-a") 'mark-sexp)

    (global-set-key (kbd "M-e") 'backward-sexp)
    (global-set-key (kbd "M-s") 'forward-sexp)

    (defun in-> () (interactive) (down-list))
    ;; (global-set-key (kbd "M-e") 'in->)

    (defun <-out () (interactive) (backward-up-list))
    (global-set-key (kbd "M-q") '<-out)

    (add-hook 'prog-mode-hook
      (lambda ()
       (local-set-key (kbd "M-q") '<-out)))

    (defun out-> () (interactive) (up-list))
    ;; (global-set-key (kbd "s-d") 'out->)


    ;; the following is for emacs-nox which can not see s-
    (define-key input-decode-map [134217825] [M-a])
    (global-set-key [M-a] 'mark-sexp)

    ;; (global-set-key (kbd "C-M-p") 'backward-sexp)
    ;; (global-set-key (kbd "C-M-n") 'forward-sexp)

    ;; (global-set-key (kbd "C-M-f") 'in->)

    ;; (global-set-key (kbd "C-M-b") '<-out)
    #+end_src

*** paredit
    file:~/.emacs.d/edit-sexp/paredit.el
    #+begin_src emacs-lisp :tangle ~/.emacs
    (autoload 'enable-paredit-mode "paredit"
      "Turn on pseudo-structural editing of Lisp code." t)

    (add-hook 'scheme-mode-hook           #'enable-paredit-mode)
    (add-hook 'racket-mode-hook           #'enable-paredit-mode)
    (add-hook 'lisp-mode-hook             #'enable-paredit-mode)
    (add-hook 'shen-mode-hook             #'enable-paredit-mode)

    ;; the following is about the *scratch* buffer
    ;; (add-hook 'lisp-interaction-mode-hook #'enable-paredit-mode)
    ;; 不知道为什么这里就算使用 maybe-map-paredit-newline 也总是绑定不到 RET
    ;; 只有在下面的 mode 中不使用 enable-paredit-mode
    ;; *scratch* buffer 中的 RET 才能正常
    (add-hook 'emacs-lisp-mode-hook       #'enable-paredit-mode)
    #+end_src

*** mini-parentheses-editor

    #+begin_src emacs-lisp :tangle ~/.emacs
    (global-set-key (kbd "M-(")         'paredit-wrap-round)
    ;; (global-set-key (kbd "M-{")         'paredit-wrap-round)
    (global-set-key (kbd "C-M-9")       'paredit-wrap-round)
    (global-set-key (kbd "M-c")         'paredit-splice-sexp)
    (global-set-key (kbd "M-r")         'paredit-raise-sexp)

    (global-set-key (kbd "<C-right>")   'paredit-forward-slurp-sexp)
    (global-set-key (kbd "<C-left>")    'paredit-forward-barf-sexp)
    (global-set-key (kbd "M-l")   'paredit-forward-slurp-sexp)
    (global-set-key (kbd "M-h")    'paredit-forward-barf-sexp)

    (global-set-key (kbd "M-\"")        'paredit-meta-doublequote)

    (global-set-key (kbd "<C-M-right>") 'paredit-backward-barf-sexp)
    (global-set-key (kbd "<C-M-left>")  'paredit-backward-slurp-sexp)
    (global-set-key (kbd "C-M-l") 'paredit-backward-barf-sexp)
    (global-set-key (kbd "C-M-h")  'paredit-backward-slurp-sexp)

    ;; (global-set-key (kbd "C-d")         'paredit-forward-delete)
    ;; (global-set-key (kbd "<backspace>") 'paredit-backward-delete)
    ;; (global-set-key (kbd "C-k")         'paredit-kill)
    #+end_src

** scheme

*** scheme-mode

    file used by cmuscheme to init a *scheme* buffer
    for a prescribed interpreter's repl

    one can change the directory to save these files
    by editing the function ``scheme-start-file'' in cmuscheme.el

    #+begin_src emacs-lisp :tangle ~/.emacs
    (require 'cmuscheme)

    (setq scheme-program-name "scheme")
    (setq auto-mode-alist (cons `("\\.sld$" . scheme-mode) auto-mode-alist))
    (setq auto-mode-alist (cons `("\\.ss$" . scheme-mode) auto-mode-alist))
    (setq auto-mode-alist (cons `("\\.sls$" . scheme-mode) auto-mode-alist))
    (setq auto-mode-alist (cons `("\\.mu$" . scheme-mode) auto-mode-alist))
    (setq auto-mode-alist (cons `("\\.lisp" . scheme-mode) auto-mode-alist))

    (defun switch-to-buffer-*scheme* ()
      (interactive)
      (switch-to-scheme 1) ;; (switch-to-buffer "*scheme*")
      (local-set-key (kbd "C-s C-d") 'previous-buffer))
    (global-set-key (kbd "C-s C-d") 'switch-to-buffer-*scheme*)

    (defun split-window-with-named-buffer (buffer-name-string)
      (interactive)
      (cond
       ((= 1 (count-windows))
            (progn
              ;; 下面这两个的组合总能行为正确
              (split-window-vertically (floor (* 0.68 (window-height))))
              (other-window 1)
              (switch-to-buffer buffer-name-string)
              (other-window -1)))

       ;; 只允许出现一个 scheme 窗口
       ;; 因此当发现有别的窗口的时候就在那个窗口中打开所需要的 buffer
       ((not (cl-find buffer-name-string
                  (mapcar (lambda (w) (buffer-name (window-buffer w)))
                          (window-list))
                  :test 'equal))
            (progn
              (other-window 1)
              (switch-to-buffer buffer-name-string)
              (other-window -1)))))

    (defun scheme-send-last-sexp-split-window ()
      (interactive)
      (scheme-send-last-sexp)
      (split-window-with-named-buffer "*scheme*"))

    (defun scheme-send-definition-split-window ()
      (interactive)
      (scheme-send-definition)
      (split-window-with-named-buffer "*scheme*"))

    (add-hook
     'inferior-scheme-mode-hook
     (lambda ()
       (local-set-key (kbd "C-c C-k")
                      (lambda ()
                        (interactive)
                        (kill-buffer)
                        (run-scheme scheme-program-name)))))

    (defun scheme-easy-to-eval ()
      (interactive)
      (if (>= (+ 1 (point))
              (point-max))
          (message "C-<tab> : last sexp is evaled")
          (let ()
            (forward-sexp)
            (scheme-send-last-sexp-split-window))))

    (add-hook
     'scheme-mode-hook
     (lambda ()
       (local-set-key (kbd "C-x C-e") 'scheme-send-last-sexp-split-window)
       (local-set-key (kbd "C-c C-e") 'scheme-send-definition-split-window)
       (local-set-key (kbd "C-<tab>") 'scheme-easy-to-eval)
       (local-set-key (kbd "{") (lambda () (interactive) (insert "{}") (backward-char 1)))
       (local-set-key (kbd "}") 'out->)
       ))
    #+end_src

*** scheme-add-keywords

    #+begin_src emacs-lisp :tangle ~/.emacs
    ;; scheme-mode 中原本的实现不是如此
    (defun scheme-add-keywords (face-name keyword-rules)
      (let* ((keyword-list (mapcar #'(lambda (x)
                                       (symbol-name (cdr x)))
                                   keyword-rules))
             (keyword-regexp (concat "(\\("
                                     (regexp-opt keyword-list)
                                     "\\)[ \n]")))
        (font-lock-add-keywords 'scheme-mode
                                `((,keyword-regexp 1 ',face-name))))
      (mapc #'(lambda (x)
                (put (cdr x)
                     'scheme-indent-function
                     (car x)))
            keyword-rules))

    ;; 前面的数字被认为是参数项的个数
    ;; 参数项完全换行时强缩进 其他项弱缩进
    ;; 非语法关键词 所有项在完全换行时都不缩进
    (scheme-add-keywords
     'font-lock-keyword-face
     '(
       ;; inet-lisp
       (1 . define-node)
       (1 . define-rule)
       (1 . define-rule*)
       (0 . assign)
       (0 . lend)
       (0 . connect)
       (0 . assert)

       ;; the little prover
       (2 . dethm)
       (1 . J-Bob/step)
       (1 . J-Bob/prove)
       (1 . J-Bob/define)

       ;; 下面 scheme 中需要高亮的词
       (0 . set!)
       (0 . set-car!)
       (0 . set-cdr!)
       (0 . vector-set!)
       (1 . quote)
       (1 . quasiquote)
       (1 . unquote)
       (1 . if)
       (1 . apply)
       (1 . letrec*)
       (1 . while)

       ;; 来自扩展的
       (1 . letcc)
       (1 . pmatch)
       (2 . pmatch-who)
       (0 . guard)
       (0 . add-to-list!)
       (0 . add-to-list-end!)
       (0 . append!)

       ;; minikanren
       (2 . ==)
       (1 . fresh)
       (0 . conde)
       (0 . condi)
       (1 . run*)
       (1 . ando+)
       (1 . oro+)
       (0 . ando)
       (0 . oro)
       (0 . trunk)
       (1 . case-inf)

       (1 . define-primitive)

       (1 . class)
       (2 . class*)
       (1 . interface)
       (1 . new)
       (1 . send)
       (0 . :)
       (1 . ::)
       (1 . super)

       (1 . match)
       (1 . match*)

       (2 . syntax-case)
       (1 . syntax-parse)

       (1 . type)
       (3 . data)
       (3 . codata)
       (1 . import)
       (0 . example)
       (0 . effect)

       (1 . equal-t)

       (2 . define-function)
       (2 . define-variable)
       (2 . define-primitive-function)

       (0 . ~)
       ;; (0 . +)
       (0 . /)
       (0 . \?)
       (0 . *)
       (0 . !)
       (0 . @)
       (0 . $)
       (0 . \#)
       (0 . &)
       (0 . ^)
       (0 . -)
       (0 . %)
       ;; (0 . =)

       (0 . <)
       (0 . >)

       (0 . =>)
       (0 . =<)
       (0 . <=)
       (0 . >=)

       (1 . define-type)
       (1 . define-data)
       (3 . datatype)
       (3 . define-datatype)
       (1 . define-function)

       (1 . map!)

       (0 . var)
       (0 . set)
       (1 . get)

       (0 . tail-call)
       (0 . string)

       (2 . declare)
       (0 . run)

       (2 . define-class)

       ;; pie
       (1 . which-Nat)
       (1 . iter-Nat)
       (1 . rec-Nat)
       (1 . ind-Nat)

       (1 . which-List)
       (1 . iter-List)
       (1 . rec-List)
       (1 . ind-List)

       (2 . ind-Vec)

       (1 . =)
       (1 . the)
       (1 . check-same)
       (1 . claim)
       (1 . Pi)
       (1 . Pi*)
       (1 . lambda*)
       (1 . Pi/implicit)
       (1 . lambda/implicit)
       (1 . Pi/vague)
       (1 . lambda/vague)
       (1 . forall)
       (1 . Sigma)
       (1 . same)
       (1 . cong)
       (1 . replace)
       (1 . implicit)

       (0 . assert-equal)
       (0 . assert-not-equal)

       (1 . induction)
       (1 . recursion)
       ))
    #+end_src

** pie

   #+begin_src emacs-lisp :tangle ~/.emacs
   (setq auto-mode-alist (cons `("\\.pie$" . scheme-mode) auto-mode-alist))
   #+end_src

** uxn

   #+begin_src emacs-lisp :tangle ~/.emacs
   ;; ensure the directory containing uxntal-mode.el is mentioned
   ;; in emacs' load-path variable.
   (add-to-list 'load-path "~/.emacs.d/uxntal-mode/")

   ;; then load uxntal-mode
   (require 'uxntal-mode)
   #+end_src

** racket

   #+begin_src emacs-lisp :tangle ~/.emacs
   (add-to-list 'load-path "~/.emacs.d/racket-mode/")
   (require 'racket-mode)
   (setq auto-mode-alist (cons `("\\.rkt$" . racket-mode) auto-mode-alist))
   #+end_src

** lisp

   #+begin_src emacs-lisp :tangle ~/.emacs
   (setq inferior-lisp-program "sbcl")
   #+end_src

** general seting

   Non-nil means print recursive structures using #N= and #N# syntax.

   #+begin_src emacs-lisp :tangle ~/.emacs
   (setq print-circle t)
   #+end_src

** shen

   #+begin_src emacs-lisp :tangle ~/.emacs
   (add-to-list 'load-path "~/.emacs.d/shen-mode/")
   (require 'shen-mode)
   #+end_src

** clojure

   #+begin_src emacs-lisp :tangle ~/.emacs
   (add-to-list 'load-path "~/.emacs.d/clojure-mode/")
   (require 'clojure-mode)

   (add-hook 'clojure-mode-hook #'enable-paredit-mode)
   (add-hook
    'clojure-mode-hook
    (lambda ()
      ;; (paren-face-mode)
      (local-set-key (kbd "C-x C-e") 'scheme-send-last-sexp-split-window)
      (local-set-key (kbd "C-c C-e") 'scheme-send-definition-split-window)
      (local-set-key (kbd "C-<tab>") 'scheme-easy-to-eval)))

   (defun run-clojure ()
     (interactive)
     ;; (run-scheme "java -cp /home/xyh/lang/clojure/clojure-1.8.0/clojure-1.8.0.jar clojure.main")
     (run-scheme "lein repl"))
   #+end_src

** julia

   #+begin_src emacs-lisp :tangle ~/.emacs
   (add-to-list 'load-path "~/.emacs.d/julia-emacs/")
   (require 'julia-mode)
   #+end_src

** cicada

   #+begin_src emacs-lisp :tangle ~/.emacs
   (add-to-list 'load-path "~/.emacs.d/cicada-mode/")
   (require 'cicada-mode)

   (add-to-list 'interpreter-mode-alist '("cicada" . cicada-mode))

   (add-hook
    'cicada-mode-hook
    (lambda ()
      (turn-off-indent)))

   (add-to-list 'auto-mode-alist '("\\.cic\\'" . cicada-mode))
   (add-to-list 'auto-mode-alist '("\\.ch\\'" . cicada-mode))
   #+end_src

** web

*** typescript-mode

    #+begin_src emacs-lisp :tangle ~/.emacs
    (add-to-list 'load-path "~/.emacs.d/typescript.el/")
    (require 'typescript-mode)

    (add-hook
     'typescript-mode-hook
     (lambda ()
       (setq typescript-indent-level 2)
       (setq tab-width 2)))

    (add-to-list 'auto-mode-alist '("\\.js\\'" . typescript-mode))
    (add-to-list 'auto-mode-alist '("\\.mjs\\'" . typescript-mode))
    (add-to-list 'auto-mode-alist '("\\.cjs\\'" . typescript-mode))
    (add-to-list 'auto-mode-alist '("\\.ts\\'" . typescript-mode))
    (add-to-list 'auto-mode-alist '("\\.d.ts\\'" . typescript-mode))
    #+end_src

*** web-mode

    #+begin_src emacs-lisp :tangle ~/.emacs
    (add-to-list 'load-path "~/.emacs.d/web-mode/")
    (require 'web-mode)

    (add-to-list 'auto-mode-alist '("\\.jsx\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.tsx\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.svelte\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.vue\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.mimor\\'" . web-mode))

    (define-key web-mode-map (kbd "C-c C-c") 'web-mode-tag-match)

    (setq web-mode-enable-auto-indentation nil)
    (setq web-mode-markup-indent-offset 2)
    (setq web-mode-css-indent-offset 2)
    (setq web-mode-code-indent-offset 2)
    (setq web-mode-style-padding 0)
    (setq web-mode-script-padding 0)
    #+end_src

*** css-mode

    #+begin_src emacs-lisp :tangle ~/.emacs
    (setq css-indent-offset 2)
    #+end_src

*** html-mode

    #+begin_src emacs-lisp :tangle ~/.emacs
    (add-hook
     'html-mode-hook
     (lambda ()
       (set (make-local-variable 'sgml-basic-offset) 2)
       ))
    #+end_src

*** emmet-mode -- quick expend

    #+begin_src emacs-lisp :tangle ~/.emacs
    (add-to-list 'load-path "~/.emacs.d/emmet-mode")
    (require 'emmet-mode)

    (add-hook 'web-mode-hook 'emmet-mode)
    (add-hook 'web-mode-hook (lambda () (electric-indent-local-mode -1)))

    (add-to-list 'emmet-jsx-major-modes 'js-jsx-mode)
    (add-hook 'js-jsx-mode-hook
     (lambda () (define-key js-jsx-mode-map (kbd "C-j") 'emmet-expand-line)))

    (add-hook 'typescript-mode-hook
     (lambda () (define-key typescript-mode-map (kbd "C-j") 'emmet-expand-line)))
    #+end_src

*** wasm

    #+begin_src emacs-lisp :tangle ~/.emacs
    (add-to-list 'load-path "~/.emacs.d/wat-mode/")
    (require 'wat-mode)
    (add-to-list 'auto-mode-alist '("\\.wat\\'" . wat-mode))
    (add-to-list 'auto-mode-alist '("\\.wast\\'" . wat-mode))
    #+end_src

** markdown

*** edit-indirect

    #+begin_src emacs-lisp :tangle ~/.emacs
    (add-to-list 'load-path "~/.emacs.d/edit-indirect/")
    (require 'edit-indirect)

    (define-key edit-indirect-mode-map
      (kbd "C-s C-s") 'edit-indirect-commit)
    #+end_src

*** markdown

    #+begin_src emacs-lisp :tangle ~/.emacs
    (add-to-list 'load-path "~/.emacs.d/markdown-mode/")

    (autoload 'markdown-mode "markdown-mode"
      "Major mode for editing Markdown files" t)
    (add-to-list 'auto-mode-alist '("\\.md\\'" . markdown-mode))
    (add-to-list 'auto-mode-alist '("\\.markdown\\'" . markdown-mode))

    (setq markdown-fontify-code-blocks-natively t)

    (add-hook
     'markdown-mode-hook
     (lambda ()
       (local-set-key (kbd "C-s C-s") 'markdown-edit-code-block)
       (local-set-key (kbd "M-p") 'backward-paragraph)
       (local-set-key (kbd "M-n") 'forward-paragraph)
       ;; (set-face-attribute 'markdown-header-face-1 nil :foreground "#DFAF8F")
       ;; (set-face-attribute 'markdown-header-face-2 nil :foreground "#BFEBBF")
       ;; (set-face-attribute 'markdown-header-face-3 nil :foreground "#7CB8BB")
       ;; (set-face-attribute 'markdown-header-face-4 nil :foreground "#D0BF8F")
       ;; (set-face-attribute 'markdown-header-face-5 nil :foreground "#93E0E3")
       ;; (set-face-attribute 'markdown-header-face-6 nil :foreground "#9FC59F")
       ;; (set-face-attribute 'markdown-header-delimiter-face nil :foreground 'unspecified)
       ))
    #+end_src

** txt

   #+begin_src emacs-lisp :tangle ~/.emacs
   (add-to-list 'auto-mode-alist '("\\.txt\\'" . text-mode))
   #+end_src

** python

   #+begin_src emacs-lisp :tangle ~/.emacs
   (setq python-indent-guess-indent-offset nil)
   (setq python-indent-offset 4)
   #+end_src

** rust

   #+begin_src emacs-lisp :tangle ~/.emacs
   (add-to-list 'load-path "~/.emacs.d/rust-mode/")
   (autoload 'rust-mode "rust-mode" nil t)
   (add-to-list 'auto-mode-alist '("\\.rs\\'" . rust-mode))
   (setq rust-indent-offset 4)
   #+end_src

** go

   #+begin_src emacs-lisp :tangle ~/.emacs
   (add-to-list 'load-path "~/.emacs.d/go-mode/")
   (require 'go-mode)

   (add-hook
    'go-mode-hook
    (lambda ()
      (setq tab-width 4)
      (setq indent-tabs-mode nil)))
   #+end_src

** forth
   #+begin_src emacs-lisp :tangle ~/.emacs
   (add-to-list 'load-path "~/.emacs.d/forth-mode/")

   (require 'forth-mode)
   (require 'forth-block-mode)
   (require 'forth-interaction-mode)

   (add-to-list 'auto-mode-alist '("\\.frt$" . forth-mode))
   (add-to-list 'auto-mode-alist '("\\.fth$" . forth-mode))
   (add-to-list 'auto-mode-alist '("\\.feline" . forth-mode))
   #+end_src

** sml
   #+begin_src emacs-lisp :tangle ~/.emacs
   (add-to-list 'load-path "~/.emacs.d/sml/")

   (autoload 'sml-mode "sml-mode" "Major mode for editing SML." t)
   (autoload 'run-sml "sml-proc" "Run an inferior SML process." t)
   (add-to-list 'auto-mode-alist '("\\.\\(sml\\|sig\\)\\'" . sml-mode))

   (setq sml-program-name "sml")
   ;; (setq sml-program-name "hamlet")

   (require 'sml-mode)

   (add-hook
    'sml-mode-hook
    (lambda ()
      (define-key sml-mode-map (kbd "C-x C-e") 'sml-send-function)
      (turn-off-indent)))
   #+end_src

** ocaml-mode
   #+begin_src emacs-lisp :tangle ~/.emacs
   (add-to-list 'load-path "~/.emacs.d/ocaml-mode/")

   (add-to-list 'auto-mode-alist '("\\.ml[iylp]?$" . caml-mode))
   (autoload 'caml-mode "caml" "Major mode for editing OCaml code." t)
   (autoload 'run-caml "inf-caml" "Run an inferior OCaml process." t)
   (autoload 'camldebug "camldebug" "Run ocamldebug on program." t)
   (add-to-list 'interpreter-mode-alist '("ocamlrun" . caml-mode))
   (add-to-list 'interpreter-mode-alist '("ocaml" . caml-mode))

   (if window-system (require 'caml-font))
   #+end_src

** agda

   #+begin_src emacs-lisp :tangle ~/.emacs
   (add-to-list 'load-path "~/.emacs.d/agda-mode/")

   (autoload 'agda2-mode "agda2-mode"
     "Major mode for editing Agda files (version ≥ 2)." t)

   (add-to-list 'auto-mode-alist '("\\.l?agda\\'" . agda2-mode))
   (modify-coding-system-alist 'file "\\.l?agda\\'" 'utf-8)

   (require 'agda2)

   (add-hook
    'agda2-mode-hook
    (lambda ()
      (turn-off-indent)))
   #+end_src

** c

   #+begin_src emacs-lisp :tangle ~/.emacs
   (setq c-basic-offset 4)
   (setq c-default-style "k&r")

   ;; (setq c-default-style "stroustrup")
   ;; (setq c-default-style "whitesmith")
   ;; (setq c-default-style "ellemtel")
   ;; (setq c-default-style "linux")

   (add-hook
    'c-mode-hook
    (lambda ()
      ;; (setq comment-style 'extra)
      (setq comment-start "//")
      (setq comment-end "")))
   #+end_src

** scala

   #+begin_src emacs-lisp :tangle ~/.emacs
   (add-to-list 'load-path "~/.emacs.d/emacs-scala-mode/")
   (require 'scala-mode)
   #+end_src

** lua

   #+begin_src emacs-lisp :tangle ~/.emacs
   (add-to-list 'load-path "~/.emacs.d/lua-mode/")

   (autoload 'lua-mode "lua-mode" "Lua editing mode." t)
   (add-to-list 'auto-mode-alist '("\\.lua$" . lua-mode))
   (add-to-list 'interpreter-mode-alist '("lua" . lua-mode))
   #+end_src

** yaml

   #+begin_src emacs-lisp :tangle ~/.emacs
   (add-to-list 'load-path "~/.emacs.d/yaml-mode/")
   (require 'yaml-mode)
   (add-to-list 'auto-mode-alist '("\\.yml$" . yaml-mode))
   #+end_src

* app

** hippie-expand

   #+begin_src emacs-lisp :tangle ~/.emacs
   (global-set-key (kbd "C-h") 'hippie-expand)

   (setq hippie-expand-try-functions-list
         '(try-expand-dabbrev
           try-expand-dabbrev-visible
           try-expand-dabbrev-all-buffers
           try-expand-dabbrev-from-kill
           try-expand-all-abbrevs
           try-expand-list
           try-expand-line
           ;; pcomplete
           try-complete-lisp-symbol-partially
           try-complete-lisp-symbol
           ;; try-complete-file-name-partially
           ;; try-complete-file-name
           ))
   #+end_src

** primary-clipboard-yank

   #+begin_src emacs-lisp :tangle ~/.emacs
   (defun primary-clipboard-yank ()
     (interactive)
     (insert (eshell-command-result "xclip -o")))

   (global-set-key (kbd "C-M-y") 'primary-clipboard-yank)
   #+end_src

** gc-cons-threshold

   #+begin_src emacs-lisp :tangle ~/.emacs
   ;; default 800000 -- 0.76 MB
   (setq gc-cons-threshold 800000)
   #+end_src

** cua-selection-mode

   #+begin_src emacs-lisp :tangle ~/.emacs
   (cua-selection-mode 1)
   #+end_src

** uniquify

   #+begin_src emacs-lisp :tangle ~/.emacs
   (require 'uniquify)
   ;(setq uniquify-buffer-name-style 'reverse)
   (setq uniquify-buffer-name-style 'forward)
   #+end_src

** region-state

   #+begin_src emacs-lisp :tangle ~/.emacs
   (add-to-list 'load-path "~/.emacs.d/region-state/")
   (require 'region-state)
   (region-state-mode)
   (setq region-state-display-place 'echo-area)
   ;; (setq region-state-display-place 'header-line)
   ;; (setq region-state-display-place 'mode-line)
   #+end_src

* ranger

  #+begin_src emacs-lisp :tangle ~/.emacs
  (add-to-list 'load-path "~/.emacs.d/ranger.el/")
  (require 'ranger)

  (global-set-key (kbd "C-s C-w") 'ranger)

  (add-hook
   'ranger-mode-hook
   (lambda ()
     (local-set-key (kbd "C-s C-w") 'other-window)
     (local-set-key (kbd "C-x C-s") (lambda () (interactive)))
     (local-set-key (kbd "C-s C-x") (lambda () (interactive)))))

  (setq ranger-hide-cursor nil)
  (setq ranger-modify-header nil)
  (setq ranger-preview-file t)
  (setq ranger-show-literal nil)
  (setq ranger-parent-depth 0)
  (setq ranger-width-preview 0.60)
  (setq ranger-preview-delay 0.01)
  #+end_src

* looks like

** window

   #+begin_src emacs-lisp :tangle ~/.emacs
   (setq default-frame-alist '((fullscreen . maximized)))
   (setq initial-frame-alist '((fullscreen . maximized)))
   ;; (custom-set-variables '(default-frame-alist (quote ((fullscreen . maximized)))))
   ;; (custom-set-variables '(initial-frame-alist (quote ((fullscreen . maximized)))))
   #+end_src

** font

*** [note]

    #+begin_src emacs-lisp
    (char-table-extra-slot char-script-table 0)
    #+end_src

*** 楷

    #+begin_src emacs-lisp :tangle ~/.emacs
    ;; (set-fontset-font t 'han (font-spec :name "MS Song" :size 30))
    ;; (set-fontset-font t 'han (font-spec :name "H-宮書" :size 28))
    ;; (set-fontset-font t 'han (font-spec :name "H-宮書" :size 50))
    ;; (set-fontset-font t 'han (font-spec :name "霞鹜文楷" :size 50))
    #+end_src

*** 宋

    #+begin_src emacs-lisp :tangle ~/.emacs
    ;; (set-fontset-font t 'han (font-spec :name "H-秀月" :size 40))
    ;; (set-fontset-font t 'han (font-spec :name "臺灣新細明體" :size 26))
    ;; (set-fontset-font t 'han (font-spec :name "思源宋体" :size 50))
    #+end_src

*** 黑

    #+begin_src emacs-lisp :tangle ~/.emacs
    ;; (set-fontset-font t 'han (font-spec :name "H-雲林呉竹体" :size 26))
    ;; (set-fontset-font t 'han (font-spec :name "Sarasa Mono SC" :size 50))

    ;; (set-fontset-font t 'han (font-spec :name "H-明蘭" :size 5044))
    ;; (set-fontset-font t 'han (font-spec :name "H-新雅蘭" :size 44))

    ;; (set-fontset-font t 'han (font-spec :name "Noto Sans CJK TC Thin" :size 44))
    ;; (set-fontset-font t 'han (font-spec :name "Noto Sans CJK TC Light" :size 44))

    ;; (set-fontset-font t 'han (font-spec :name "Noto Sans CJK TC DemiLight" :size 28))
    ;; (set-fontset-font t 'han (font-spec :name "Sarasa Mono SC" :size 44))

    ;; (set-fontset-font t 'han (font-spec :name "Noto Sans CJK SC" :size 50))
    (set-fontset-font t 'han (font-spec :name "unifont" :size 54))
    ;; (set-fontset-font t 'han (font-spec :name "Noto Sans CJK TC Bold" :size 26))
    ;; (set-fontset-font t 'han (font-spec :name "Noto Sans CJK TC Black" :size 26))
    #+end_src

*** test 等宽测试

    中英等宽测试|
    sdasddassaas|
    iiiiiiiiiiii|
    λλλλλλλλλλλλ|

*** english

    #+begin_src emacs-lisp :tangle ~/.emacs
    ;; 【“”""】【。.】【，,】【!！】【0 o】
    ;; [1i]

    ;; ~!@#$%^&*+=
    ;; 01234567890
    ;; -- ~~ __
    ;; ___---___---
    ;; >< <> -> =>
    ;; () [] {}
    ;; ;: "@" '@'
    ;; 1lJL qp QP o0O 8B 08
    ;; ,.  `'
    ;; <: :>
    ;; |- |--
    ;; <- ->
    ;; |- |--
    ;; |- |--

    ;; (set-face-attribute 'default nil :family "Input" :height 150)
    ;; (set-face-attribute 'default nil :family "Monaco" :height 170)
    (set-face-attribute 'default nil :family "unifont" :height 200)
    (set-face-attribute 'fixed-pitch nil :family "unifont")

    ;; (set-face-attribute 'default nil :family "minecraft" :height 180)
    ;; (set-face-attribute 'default nil :family "Monoid" :height 140)
    ;; (set-face-attribute 'default nil :family "Monoid Nerd Font" :height 140)
    ;; (set-face-attribute 'default nil :family "Terminus (TTF)" :height 190)
    ;; (set-face-attribute 'default nil :family "xos4 Terminus" :height 200)
    ;; (set-face-attribute 'default nil :family "PragmataPro Mono" :height 200)
    ;; (set-face-attribute 'default nil :family "monofur" :height 160)
    ;; (set-face-attribute 'default nil :family "Monofur Nerd Font" :height 160)

    ;; (set-face-attribute 'default nil :family "monaco" :height 155)
    ;; (set-face-attribute 'default nil :family "Fixedsys Excelsior 3.01" :height 190)
    ;; (set-face-attribute 'default nil :family "Fira Code" :height 150)
    ;; (set-face-attribute 'default nil :family "Fira Mono" :height 190)
    ;; (set-face-attribute 'default nil :family "Sarasa Mono SC" :height 190)

    ;; (set-face-attribute 'default nil :family "Source Code Pro" :height 180)
    ;; (set-face-attribute 'default nil :family "mononoki" :height 180)
    ;; (set-face-attribute 'default nil :family "Noto Mono" :height 180)
    #+end_src

*** symbol

    #+begin_src emacs-lisp :tangle ~/.emacs
    ;; (set-fontset-font t 'symbol (font-spec :name "Noto Mono"))
    (set-fontset-font t 'symbol (font-spec :name "unifont"))
    ;; (set-fontset-font t 'symbol (font-spec :name "Sarasa Mono SC"))
    ;; (set-fontset-font t 'symbol (font-spec :name "Fira Code"))
    ;; (set-fontset-font t 'symbol (font-spec :name "Noto Emoji"))
    #+end_src

** translucent

   #+begin_src emacs-lisp :tangle ~/.emacs
   ;; 当前窗口和非当前窗口时透明度
   (setq translucent-pair '(80 60))

   (setq alpha-list `(,translucent-pair (100 100)))
   (defun translucent ()
     (interactive)
     (let* ((h (car alpha-list))
            (a (car h))
            (ab (car (cdr h))))
           (set-frame-parameter (selected-frame) 'alpha (list a ab))
           (add-to-list 'default-frame-alist (cons 'alpha (list a ab)))
           (setq alpha-list (cdr (append alpha-list (list h))))))
   (global-set-key (kbd "<f9>") 'translucent)

   (setq alpha-list-off `((100 100) ,translucent-pair))
   (defun translucent-off ()
     (interactive)
     (let* ((h (car alpha-list-off))
            (a (car h))
            (ab (car (cdr h))))
           (set-frame-parameter (selected-frame) 'alpha (list a ab))
           (add-to-list 'default-frame-alist (cons 'alpha (list a ab)))))

   (setq alpha-list-on `(,translucent-pair (100 100)))
   (defun translucent-on ()
     (interactive)
     (let* ((h (car alpha-list-on))
            (a (car h))
            (ab (car (cdr h))))
           (set-frame-parameter (selected-frame) 'alpha (list a ab))
           (add-to-list 'default-frame-alist (cons 'alpha (list a ab)))))

   ;; (translucent-on)
   (translucent-off)
   #+end_src

** no-bother
   #+begin_src emacs-lisp :tangle ~/.emacs
   (mouse-avoidance-mode 'animate)
   (setq inhibit-startup-message t)
   (setq initial-scratch-message "")

   (tool-bar-mode -1)
   (menu-bar-mode -1)
   (scroll-bar-mode -1)

   (fset 'yes-or-no-p 'y-or-n-p)
   #+end_src

** cursor
   #+begin_src emacs-lisp :tangle ~/.emacs
   (blink-cursor-mode -1)

   ;; (set-frame-parameter nil 'cursor-type 'hollow)
   (set-frame-parameter nil 'cursor-type 'box)
   ;; (set-frame-parameter nil 'cursor-type 'bar)
   ;; (set-frame-parameter nil 'cursor-type '(bar . 2))
   ;; (set-frame-parameter nil 'cursor-type 'hbar)
   ;; (set-frame-parameter nil 'cursor-type '(hbar . 8))
   #+end_src

** fullscreen
   #+begin_src emacs-lisp :tangle ~/.emacs
   (setq frame-resize-pixelwise t)
   #+end_src

* emacs server

** emacs server

   #+begin_src emacs-lisp :tangle ~/.emacs
   (require 'server)
   (when (not (server-running-p)) (server-start))

   ;; (server-start)
   ;; (server-force-delete)
   #+end_src

* scratch

  #+begin_src emacs-lisp :tangle ~/.emacs
  (if (<= (length command-line-args) 1)
    (let ((filename "~/todo/TODO.md"))
      (when (file-exists-p filename)
        (setq initial-buffer-choice filename))))
  #+end_src

* projectile

  #+begin_src emacs-lisp :tangle ~/.emacs
  (add-to-list 'load-path "~/.emacs.d/projectile/")
  (require 'projectile)
  (projectile-mode 1)
  #+end_src

* auto revert

  #+begin_src emacs-lisp :tangle ~/.emacs
  (global-auto-revert-mode t)
  (setq auto-revert-interval 0.3)
  #+end_src
